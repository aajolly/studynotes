---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: public and private subnets in four availability zones in us-west-2'
Parameters:
  CidrBlock:
    Description: 'The CIDR block to use for VPC creation'
    Type: String
    Default: 10.0.0.0/16
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub 'vpc-${CidrBlock}'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub IGW-${CidrBlock}
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetAPublic:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [0, !Cidr [ !GetAtt VPC.CidrBlock, 8, 12]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public_Subnet_A'
      - Key: Reach
        Value: public
  SubnetAPrivate:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [ !GetAtt VPC.CidrBlock, 8, 12]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private_Subnet_A'
      - Key: Reach
        Value: private
  SubnetBPublic:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [2, !Cidr [ !GetAtt VPC.CidrBlock, 8, 12]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public_Subnet_B'
      - Key: Reach
        Value: public
  SubnetBPrivate:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [3, !Cidr [ !GetAtt VPC.CidrBlock, 8, 12]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private_Subnet_B'
      - Key: Reach
        Value: private
  SubnetCPublic:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [4, !Cidr [ !GetAtt VPC.CidrBlock, 8, 12]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public_Subnet_C'
      - Key: Reach
        Value: public
  SubnetCPrivate:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [5, !Cidr [ !GetAtt VPC.CidrBlock, 8, 12]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private_Subnet_C'
      - Key: Reach
        Value: private
  SubnetDPublic:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [3, !GetAZs '']
      CidrBlock: !Select [6, !Cidr [ !GetAtt VPC.CidrBlock, 8, 12]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public_Subnet_D'
      - Key: Reach
        Value: public
  SubnetDPrivate:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [3, !GetAZs '']
      CidrBlock: !Select [7, !Cidr [ !GetAtt VPC.CidrBlock, 8, 12]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'D private'
      - Key: Reach
        Value: private
  RouteTableAPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  RouteTableAPrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  RouteTableBPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B Public'
  RouteTableBPrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B Private'
  RouteTableCPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'C Public'
  RouteTableCPrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'C Private'
  RouteTableDPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'D Public'
  RouteTableDPrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'D Private'
  RouteTableAssociationAPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTableAPublic
  RouteTableAssociationAPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTableAPrivate
  RouteTableAssociationBPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTableBPublic
  RouteTableAssociationBPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTableBPrivate
  RouteTableAssociationCPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetCPublic
      RouteTableId: !Ref RouteTableCPublic
  RouteTableAssociationCPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetCPrivate
      RouteTableId: !Ref RouteTableCPrivate
  RouteTableAssociationDPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetDPublic
      RouteTableId: !Ref RouteTableDPublic
  RouteTableAssociationDPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetDPrivate
      RouteTableId: !Ref RouteTableDPrivate
  RouteTablePublicAInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTablePublicBInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTablePublicCInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableCPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTablePublicDInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableDPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  NetworkAclPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  NetworkAclPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  SubnetNetworkAclAssociationAPublic:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationAPrivate:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetAPrivate
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationBPublic:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationBPrivate:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetBPrivate
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationCPublic:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetCPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationCPrivate:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetCPrivate
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationDPublic:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetDPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationDPrivate:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetDPrivate
      NetworkAclId: !Ref NetworkAclPrivate
  NetworkAclEntryInPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPrivateAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  EndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RouteTableAPublic
        - !Ref RouteTableBPublic
        - !Ref RouteTableCPublic
        - !Ref RouteTableDPublic
        - !Ref RouteTableAPrivate
        - !Ref RouteTableBPrivate
        - !Ref RouteTableCPrivate
        - !Ref RouteTableDPrivate
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'vpc/vpc-4azs'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '13.9.0'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  NumberOfAZs:
    Description: 'Number of AZs'
    Value: 4
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZs:
    Description: 'List of AZs'
    Value: !Join [',', [!Select [0, !GetAZs ''], !Select [1, !GetAZs ''], !Select [2, !GetAZs ''], !Select [3, !GetAZs '']]]
    Export:
      Name: !Sub '${AWS::StackName}-AZList'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'
  AZC:
    Description: 'AZ of C'
    Value: !Select [2, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZC'
  AZD:
    Description: 'AZ of D'
    Value: !Select [3, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZD'
  CidrBlock:
    Description: 'The set of IP addresses for the VPC.'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  InternetGateway:
    Description: 'InternetGateway.'
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-InternetGateway'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic, !Ref SubnetCPublic, !Ref SubnetDPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate, !Ref SubnetCPrivate, !Ref SubnetDPrivate]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'
  RouteTablesPrivate:
    Description: 'Route tables private.'
    Value: !Join [',', [!Ref RouteTableAPrivate, !Ref RouteTableBPrivate, !Ref RouteTableCPrivate, !Ref RouteTableDPrivate]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPrivate'
  RouteTablesPublic:
    Description: 'Route tables public.'
    Value: !Join [',', [!Ref RouteTableAPublic, !Ref RouteTableBPublic, !Ref RouteTableCPublic, !Ref RouteTableDPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPublic'
  SubnetAPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPublic'
  RouteTableAPublic:
    Description: 'Route table A public.'
    Value: !Ref RouteTableAPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableAPublic'
  SubnetAPrivate:
    Description: 'Subnet A private.'
    Value: !Ref SubnetAPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPrivate'
  RouteTableAPrivate:
    Description: 'Route table A private.'
    Value: !Ref RouteTableAPrivate
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableAPrivate'
  SubnetBPublic:
    Description: 'Subnet B public.'
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPublic'
  RouteTableBPublic:
    Description: 'Route table B public.'
    Value: !Ref RouteTableBPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableBPublic'
  SubnetBPrivate:
    Description: 'Subnet B private.'
    Value: !Ref SubnetBPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPrivate'
  RouteTableBPrivate:
    Description: 'Route table B private.'
    Value: !Ref RouteTableBPrivate
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableBPrivate'
  SubnetCPublic:
    Description: 'Subnet C public.'
    Value: !Ref SubnetCPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPublic'
  RouteTableCPublic:
    Description: 'Route table C public.'
    Value: !Ref RouteTableCPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableCPublic'
  SubnetCPrivate:
    Description: 'Subnet C private.'
    Value: !Ref SubnetCPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPrivate'
  RouteTableCPrivate:
    Description: 'Route table C private.'
    Value: !Ref RouteTableCPrivate
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableCPrivate'
  SubnetDPublic:
    Description: 'Subnet D public.'
    Value: !Ref SubnetDPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetDPublic'
  RouteTableDPublic:
    Description: 'Route table D public.'
    Value: !Ref RouteTableDPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableDPublic'
  SubnetDPrivate:
    Description: 'Subnet D private.'
    Value: !Ref SubnetDPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetDPrivate'
  RouteTableDPrivate:
    Description: 'Route table D private.'
    Value: !Ref RouteTableDPrivate
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableDPrivate'
  Endpoint:
    Description: 'The VPC endpoint to S3.'
    Value: !Ref EndpointS3
    Export:
      Name: !Sub '${AWS::StackName}-EndpointS3'